Simple Programming Language Grammer by EBNF

<spl_program>	::= <block> '.'
<block>			::= 'begin' { <dcl> ';' } <st_list> 'end'
<dcl>			::= ('label' | 'integer' ) <id> { ',' <id> }
<st_list>		::= <st> { ',' <st> }
<st>			::= [ <id> ':' ] <statement>
<statement>		::= <assignment> | <goto_st> | <if_st> | <write_st> | <block>
<assignment>	::= <exp> '=>' <id> { '=>' <id> }
<goto_st>		::= 'goto' <id>
<if_st>			::= 'if' <condition> 'then' <st_list> [ 'else' <st_list> ] 'fi'
<write_st>		::= 'output' '(' <exp> { ',' <exp> } ')'
<condition>		::= <exp> ( '<' | '>' | '=' ) <exp>
<exp>			::= <term> { ( '+' | '-' ) <term> }
<term>			::= <factor> { ( '*' | '/' ) <factor> }
<factor>		::= 'input' | <id> | <number> | '(' <exp> ')'


Convert BNF

1: <spl_program>	::= <block> '.'
2: <block>			::= 'begin' <A> <st_list> 'end'
3: <A>				::= <dcl> ';' <A> 
4:					  | e
5: <dcl>			::= 'label' <id> <B>
6:					  | 'integer' <id> <B>
7: <B>				::= ',' <id>
8:					  | e
9: <st_list>		::= <st> <C>
10: <C>				::= ',' <st> <C>
11:					  | e
12: <st>			::= <id> ':' <statement>
13:					  | <statement>
14: <statement>		::= <assignment>
15:					  | <goto_st>
16:					  | <if_st>
17:					  | <write_st>
18:					  | <block>
19:	<assignment>	::= <exp> '=>' <id> <D>
20: <D>				::= '=>' <id> <D>
21:					  | e
22: <goto_st>		::= 'goto' <id>
23: <if_st>			::= 'if' <condition> 'then' <st_list> 'fi'
24:					  | 'if' <condition> 'then' <st_list> 'else' <st_list> 'fi'
25: <write_st>		::= 'output' '(' <exp> <E> ')'
26: <E>				::= ',' <exp> <E>
27:					  | e
28: <condition>		::= <exp> <F> <exp>
29: <F>				::= '<'
30:					  | '>'
31:					  | '='
32: <exp>			::= <term> <G>
33: <G>				::= '+' <term> <G>
34:					  | '-' <term> <G>
35:					  | e
36: <term>			::= <factor> <H>
37: <H>				::= '*' <factor> <H>
38:					  | '/' <factor> <H>
39:					  | e
40: <factor>		::= 'input
41:					  | <id>
42:					  | <number>
43:					  | '(' <exp> ')'
